{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red0\green0\blue0;\red135\green135\blue135;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c0\c0;\cssrgb\c60000\c60000\c60000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww16720\viewh11720\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f1\fs45\fsmilli22667 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl780\sa240\partightenfactor0

\fs66\fsmilli33333 \cf2 AirIDDriver HowTo for iOS 
\f2\fs24 \cf3 \
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f1\fs45\fsmilli22667 \cf2 \
Using API
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Use the framework\
1. Add the framework to the "Embedded Binaries"-Section in the General-Tab of the Project-Settings.\
2. Add in info.plist  NSBluetoothAlwaysUsageDescription\
\
        <key>NSBluetoothAlwaysUsageDescription</key>\
	<string>App communicates using CoreBluetooth</string>\
	<key>NSBluetoothPeripheralUsageDescription</key>\
	<string>$(PRODUCT_NAME) requires Bluetooth</string>\
	<key>UIBackgroundModes</key>\
	<array>\
		<string>bluetooth-central</string>\
	</array>\
\
3. Import the AirIDDriver umbrella header wherever you want to use the SDK.\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3 \cf4 \expnd0\expndtw0\kerning0
#import <AirIDDriver/AirIDDriver.h>
\f1\fs45\fsmilli22667 \cf2  
\f2\fs24 \cf3 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f1\fs29\fsmilli14667 \cf2 The device manager gives you the opportunity to search for AirIDs and connect to a device. Call 
\f3\fs24 [[AIDDeviceManager sharedManager] setScanForPeripherals:YES] 
\f1\fs29\fsmilli14667 before calling 
\f2\fs24 \cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f3 \cf2 [[AIDDeviceManager sharedManager] start] 
\f1\fs29\fsmilli14667 to tell the device manager to scan for AirIDs. To be notified when devices appear or disappear either set the delegate property of the device manager or register the 
\f3\fs24 AIDDeviceManagerDidChangeDeviceList 
\f1\fs29\fsmilli14667 notification in 
\f2\fs24 \cf3 \

\f3 \cf2 NSNotificationCenter 
\f1\fs29\fsmilli14667 . Here is an example: \

\f3\fs24 - (void)startDeviceManagerScanningForDevices\
\{\
    //set yourself as delegate\
    AIDDeviceManager.sharedManager.delegate = self;\
    \
    AIDDeviceManager.sharedManager.autoConnectSavedDevice = NO;\
    [[AIDDeviceManager sharedManager] forgetSavedDevice];\
\}\
If the BLE activated (poor on) start scan for peripherals
\f1\fs29\fsmilli14667 \
- (void)deviceManagerStatePowerOn:(AIDDeviceManager *)manager\
\{\
    // start peripherals scanning...\
    [[AIDDeviceManager sharedManager] setScanForPeripherals:YES];\
    // initialize AIDDeviceManager\
    [[AIDDeviceManager sharedManager] start];\
\}\
\
\pard\pardeftab720\sl600\sa240\partightenfactor0

\fs50\fsmilli25333 \cf2 Connecting with the SmartCard 
\f2\fs24 \cf3 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f1\fs29\fsmilli14667 \cf2 When successfully connected and initialized with the AirID reader\
 you can either use the winscard inspired API in AirIdSCard.h \
or the card-property of AIDDevice to talk to the SmartCard. \
The latter is recommended and shown here. 
\f2\fs24 \cf3 \

\f1\fs29\fsmilli14667 \cf2 First you have to reset the card. This will power on the card if it's not already. 
\f2\fs24 \cf3 \
\

\f1\fs29\fsmilli14667 \cf2 After that you can send APDUs to the card by calling 
\f3\fs24 [AIDCard sendAPDUWithData: \
(NSData* receivedData, SCARD_IO_REQUEST* receiveProtocol))callback;] 
\f1\fs29\fsmilli14667 .\
 Use NULL for the SCARD_IO_REQUEST as protocol-testing is not implemented yet. \
The AirID assumes usage of the first reported protocol if multiple are supported. 
\f2\fs24 \cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 \
}